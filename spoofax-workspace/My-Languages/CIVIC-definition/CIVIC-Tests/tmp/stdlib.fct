initialise-binding initialise-storing initialise-giving initialise-memos finalise-failing finalise-throwing multithread postpone-after-effect scope
  (bind
     ("_std",
      allocate-initialised-variable
        (environments,
         map
           ( ))),
   sequential
     (( ),
      ( ),
      ( ),
      ( ),
      ( ),
      scope
        (collateral
           (bind
              ("printInt",
               allocate-variable
                 (functions
                    (tuples
                       ((values)*),
                     values))),
            bind
              ("printFloat",
               allocate-variable
                 (functions
                    (tuples
                       ((values)*),
                     values))),
            bind
              ("printSpaces",
               allocate-variable
                 (functions
                    (tuples
                       ((values)*),
                     values))),
            bind
              ("printNewlines",
               allocate-variable
                 (functions
                    (tuples
                       ((values)*),
                     values))),
            bind
              ("main",
               allocate-variable
                 (functions
                    (tuples
                       ((values)*),
                     values)))),
         sequential
           (assign
              (bound
                 ("printInt"),
               function closure
                 (scope
                    (match
                       (given,
                        tuple
                          (pattern closure
                             (bind
                                ("val",
                                 allocate-initialised-variable
                                   (values,
                                    given))))),
                     handle-return
                       (print
                          (assigned
                             (bound
                                ("val"))))))),
            assign
              (bound
                 ("printFloat"),
               function closure
                 (scope
                    (match
                       (given,
                        tuple
                          (pattern closure
                             (bind
                                ("val",
                                 allocate-initialised-variable
                                   (values,
                                    given))))),
                     handle-return
                       (print
                          (assigned
                             (bound
                                ("val"))))))),
            assign
              (bound
                 ("printSpaces"),
               function closure
                 (scope
                    (match
                       (given,
                        tuple
                          (pattern closure
                             (bind
                                ("num",
                                 allocate-initialised-variable
                                   (values,
                                    given))))),
                     handle-return
                       (print
                          (" "))))),
            assign
              (bound
                 ("printNewlines"),
               function closure
                 (scope
                    (match
                       (given,
                        tuple
                          (pattern closure
                             (bind
                                ("num",
                                 allocate-initialised-variable
                                   (values,
                                    given))))),
                     handle-return
                       (print
                          ("
"))))),
            assign
              (bound
                 ("main"),
               function closure
                 (scope
                    (match
                       (given,
                        tuple
                          ( )),
                     handle-return
                       (scope
                          (collateral
                             ( ),
                           sequential
                             (( ),
                              else
                                (int-add
                                   (decimal-natural
                                      ("1"),
                                    decimal-natural
                                      ("1")),
                                 float-add
                                   (decimal-natural
                                      ("1"),
                                    decimal-natural
                                      ("1"))),
                              exec [: printNewlines ( 1 ) ; :],
                              apply
                                (assigned
                                   (bound
                                      ("foo")),
                                 tuple
                                   (decimal-natural
                                      ("1"))),
                              return
                                (decimal-natural
                                   ("0")))))))),
            apply
              (assigned
                 (bound
                    ("main")),
               tuple
                 ( ))))))