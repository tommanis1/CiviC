===== Program =====
===================
  no-given(initialise-generating(initialise-generating(closed(initialise-storing(initialise-giving(finalise-failing(finalise-throwing(multithread(postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))))))))))))):
    Pattern match failed: initialise-generating(initialise-generating(closed(initialise-storing(initialise-giving(finalise-failing(finalise-throwing(multithread(postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))))))))))) does not match [PAnnotated (PMetaVar "U") (TName "values")]
      closed(initialise-storing(initialise-giving(finalise-failing(finalise-throwing(multithread(postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))))))))):
    Pattern match failed: initialise-storing(initialise-giving(finalise-failing(finalise-throwing(multithread(postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))))))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      no-given(initialise-generating(initialise-giving(finalise-failing(finalise-throwing(multithread(postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))))))))):
    Pattern match failed: initialise-generating(initialise-giving(finalise-failing(finalise-throwing(multithread(postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))))))))) does not match [PAnnotated (PMetaVar "U") (TName "values")]
      no-given(finalise-failing(finalise-throwing(multithread(postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))))))):
    Pattern match failed: finalise-failing(finalise-throwing(multithread(postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))))))) does not match [PAnnotated (PMetaVar "U") (TName "values")]
      handle-abrupt(finalise-throwing(multithread(postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))))),null-value):
    Pattern match failed: finalise-throwing(multithread(postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))))),null-value does not match [PAnnotated (PMetaVar "V") (TName "values"),PMetaVar "Y"]
      handle-abrupt(multithread(postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))))),null-value):
    Pattern match failed: multithread(postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))))),null-value does not match [PAnnotated (PMetaVar "V") (TName "values"),PMetaVar "Y"]
      give(thread-id(atom(@1)),handle-abrupt(sequential(while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given)),given)):
    Pattern match failed: thread-id(atom(@1)),handle-abrupt(sequential(while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given)),given) does not match [PAnnotated PWildCard (TName "values"),PAnnotated (PMetaVar "W") (TName "values")]
      handle-abrupt(sequential(while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given)),given):
    Pattern match failed: sequential(while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given)),given does not match [PAnnotated (PMetaVar "V") (TName "values"),PMetaVar "Y"]
      sequential(while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given)):
    Pattern match failed: while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given) does not match [PMetaVar "Y"]
    Pattern match failed: while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given) does not match [PValue (PADT "null-value" []),PSeqVar "Y+" PlusOp]
      sequential(sequential(update-thread-stepping,thread-step),while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step))):
    Pattern match failed: sequential(update-thread-stepping,thread-step),while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)) does not match [PMetaVar "Y"]
    Pattern match failed: sequential(update-thread-stepping,thread-step),while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)) does not match [PValue (PADT "null-value" []),PSeqVar "Y+" PlusOp]
      thread-step:
    Pattern match failed: closed(scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))))) does not match [PValue (VPAnnotated (VPMetaVar "V") (TName "values"))]
      closed(scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))))):
    Pattern match failed: scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))))):
    Pattern match failed: map-empty,postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))):
    Pattern match failed: scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      give(tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))):
    Pattern match failed: tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))) does not match [PAnnotated PWildCard (TName "values"),PAnnotated (PMetaVar "W") (TName "values")]
      closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))):
    Pattern match failed: scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))):
    Pattern match failed: map-empty,handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))):
    Pattern match failed: scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      give(tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))):
    Pattern match failed: tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))) does not match [PAnnotated PWildCard (TName "values"),PAnnotated (PMetaVar "W") (TName "values")]
      closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))):
    Pattern match failed: scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))):
    Pattern match failed: map-empty,handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))):
    Pattern match failed: scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: thread(thunk(abstraction(closed(scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))))))),[]) does not match [PADT "thread" [PADT "thunk" [PADT "abstraction" [VPMetaVar "X"]]]]
      sequential(while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given)):
    Pattern match failed: while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given) does not match [PMetaVar "Y"]
    Pattern match failed: while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given) does not match [PValue (PADT "null-value" []),PSeqVar "Y+" PlusOp]
      sequential(sequential(update-thread-stepping,thread-step),while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step))):
    Pattern match failed: sequential(update-thread-stepping,thread-step),while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)) does not match [PMetaVar "Y"]
    Pattern match failed: sequential(update-thread-stepping,thread-step),while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)) does not match [PValue (PADT "null-value" []),PSeqVar "Y+" PlusOp]
      thread-step:
    Pattern match failed: closed(scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))))) does not match [PValue (VPAnnotated (VPMetaVar "V") (TName "values"))]
      closed(scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))))):
    Pattern match failed: scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))))):
    Pattern match failed: map-empty,postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))):
    Pattern match failed: scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      give(tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))):
    Pattern match failed: tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))) does not match [PAnnotated PWildCard (TName "values"),PAnnotated (PMetaVar "W") (TName "values")]
      closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))):
    Pattern match failed: scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))):
    Pattern match failed: map-empty,handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))):
    Pattern match failed: scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      give(tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))):
    Pattern match failed: tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))) does not match [PAnnotated PWildCard (TName "values"),PAnnotated (PMetaVar "W") (TName "values")]
      closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))):
    Pattern match failed: scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))):
    Pattern match failed: map-empty,handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))):
    Pattern match failed: scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: thread(thunk(abstraction(closed(scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))))))),[]) does not match [PADT "thread" [PADT "thunk" [PADT "abstraction" [VPMetaVar "X"]]]]
      give(thread-id(atom(@1)),handle-abrupt(sequential(while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given)),given)):
    Pattern match failed: thread-id(atom(@1)),handle-abrupt(sequential(while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given)),given) does not match [PAnnotated PWildCard (TName "values"),PAnnotated (PMetaVar "W") (TName "values")]
      handle-abrupt(sequential(while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given)),given):
    Pattern match failed: sequential(while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given)),given does not match [PAnnotated (PMetaVar "V") (TName "values"),PMetaVar "Y"]
      sequential(while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given)):
    Pattern match failed: while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given) does not match [PMetaVar "Y"]
    Pattern match failed: while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given) does not match [PValue (PADT "null-value" []),PSeqVar "Y+" PlusOp]
      sequential(sequential(update-thread-stepping,thread-step),while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step))):
    Pattern match failed: sequential(update-thread-stepping,thread-step),while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)) does not match [PMetaVar "Y"]
    Pattern match failed: sequential(update-thread-stepping,thread-step),while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)) does not match [PValue (PADT "null-value" []),PSeqVar "Y+" PlusOp]
      thread-step:
    Pattern match failed: closed(scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))))) does not match [PValue (VPAnnotated (VPMetaVar "V") (TName "values"))]
      closed(scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))))):
    Pattern match failed: scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))))):
    Pattern match failed: map-empty,postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))):
    Pattern match failed: scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      give(tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))):
    Pattern match failed: tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))) does not match [PAnnotated PWildCard (TName "values"),PAnnotated (PMetaVar "W") (TName "values")]
      closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))):
    Pattern match failed: scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))):
    Pattern match failed: map-empty,handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))):
    Pattern match failed: scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      give(tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))):
    Pattern match failed: tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))) does not match [PAnnotated PWildCard (TName "values"),PAnnotated (PMetaVar "W") (TName "values")]
      closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))):
    Pattern match failed: scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))):
    Pattern match failed: map-empty,handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))):
    Pattern match failed: scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: thread(thunk(abstraction(closed(scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))))))),[]) does not match [PADT "thread" [PADT "thunk" [PADT "abstraction" [VPMetaVar "X"]]]]
      sequential(while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given)):
    Pattern match failed: while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given) does not match [PMetaVar "Y"]
    Pattern match failed: while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given) does not match [PValue (PADT "null-value" []),PSeqVar "Y+" PlusOp]
      sequential(sequential(update-thread-stepping,thread-step),while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step))):
    Pattern match failed: sequential(update-thread-stepping,thread-step),while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)) does not match [PMetaVar "Y"]
    Pattern match failed: sequential(update-thread-stepping,thread-step),while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)) does not match [PValue (PADT "null-value" []),PSeqVar "Y+" PlusOp]
      thread-step:
    Pattern match failed: closed(scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))))) does not match [PValue (VPAnnotated (VPMetaVar "V") (TName "values"))]
      closed(scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))))):
    Pattern match failed: scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))))):
    Pattern match failed: map-empty,postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))):
    Pattern match failed: scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      give(tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))):
    Pattern match failed: tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))) does not match [PAnnotated PWildCard (TName "values"),PAnnotated (PMetaVar "W") (TName "values")]
      closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))):
    Pattern match failed: scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))):
    Pattern match failed: map-empty,handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))):
    Pattern match failed: scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      give(tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))):
    Pattern match failed: tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))) does not match [PAnnotated PWildCard (TName "values"),PAnnotated (PMetaVar "W") (TName "values")]
      closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))):
    Pattern match failed: scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))):
    Pattern match failed: map-empty,handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))):
    Pattern match failed: scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: thread(thunk(abstraction(closed(scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))))))),[]) does not match [PADT "thread" [PADT "thunk" [PADT "abstraction" [VPMetaVar "X"]]]]
      handle-abrupt(multithread(postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))))),null-value):
    Pattern match failed: multithread(postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))))),null-value does not match [PAnnotated (PMetaVar "V") (TName "values"),PMetaVar "Y"]
      give(thread-id(atom(@1)),handle-abrupt(sequential(while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given)),given)):
    Pattern match failed: thread-id(atom(@1)),handle-abrupt(sequential(while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given)),given) does not match [PAnnotated PWildCard (TName "values"),PAnnotated (PMetaVar "W") (TName "values")]
      handle-abrupt(sequential(while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given)),given):
    Pattern match failed: sequential(while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given)),given does not match [PAnnotated (PMetaVar "V") (TName "values"),PMetaVar "Y"]
      sequential(while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given)):
    Pattern match failed: while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given) does not match [PMetaVar "Y"]
    Pattern match failed: while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given) does not match [PValue (PADT "null-value" []),PSeqVar "Y+" PlusOp]
      sequential(sequential(update-thread-stepping,thread-step),while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step))):
    Pattern match failed: sequential(update-thread-stepping,thread-step),while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)) does not match [PMetaVar "Y"]
    Pattern match failed: sequential(update-thread-stepping,thread-step),while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)) does not match [PValue (PADT "null-value" []),PSeqVar "Y+" PlusOp]
      thread-step:
    Pattern match failed: closed(scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))))) does not match [PValue (VPAnnotated (VPMetaVar "V") (TName "values"))]
      closed(scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))))):
    Pattern match failed: scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))))):
    Pattern match failed: map-empty,postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))):
    Pattern match failed: scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      give(tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))):
    Pattern match failed: tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))) does not match [PAnnotated PWildCard (TName "values"),PAnnotated (PMetaVar "W") (TName "values")]
      closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))):
    Pattern match failed: scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))):
    Pattern match failed: map-empty,handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))):
    Pattern match failed: scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      give(tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))):
    Pattern match failed: tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))) does not match [PAnnotated PWildCard (TName "values"),PAnnotated (PMetaVar "W") (TName "values")]
      closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))):
    Pattern match failed: scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))):
    Pattern match failed: map-empty,handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))):
    Pattern match failed: scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: thread(thunk(abstraction(closed(scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))))))),[]) does not match [PADT "thread" [PADT "thunk" [PADT "abstraction" [VPMetaVar "X"]]]]
      sequential(while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given)):
    Pattern match failed: while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given) does not match [PMetaVar "Y"]
    Pattern match failed: while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given) does not match [PValue (PADT "null-value" []),PSeqVar "Y+" PlusOp]
      sequential(sequential(update-thread-stepping,thread-step),while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step))):
    Pattern match failed: sequential(update-thread-stepping,thread-step),while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)) does not match [PMetaVar "Y"]
    Pattern match failed: sequential(update-thread-stepping,thread-step),while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)) does not match [PValue (PADT "null-value" []),PSeqVar "Y+" PlusOp]
      thread-step:
    Pattern match failed: closed(scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))))) does not match [PValue (VPAnnotated (VPMetaVar "V") (TName "values"))]
      closed(scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))))):
    Pattern match failed: scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))))):
    Pattern match failed: map-empty,postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))):
    Pattern match failed: scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      give(tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))):
    Pattern match failed: tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))) does not match [PAnnotated PWildCard (TName "values"),PAnnotated (PMetaVar "W") (TName "values")]
      closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))):
    Pattern match failed: scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))):
    Pattern match failed: map-empty,handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))):
    Pattern match failed: scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      give(tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))):
    Pattern match failed: tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))) does not match [PAnnotated PWildCard (TName "values"),PAnnotated (PMetaVar "W") (TName "values")]
      closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))):
    Pattern match failed: scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))):
    Pattern match failed: map-empty,handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))):
    Pattern match failed: scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: thread(thunk(abstraction(closed(scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))))))),[]) does not match [PADT "thread" [PADT "thunk" [PADT "abstraction" [VPMetaVar "X"]]]]
      give(thread-id(atom(@1)),handle-abrupt(sequential(while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given)),given)):
    Pattern match failed: thread-id(atom(@1)),handle-abrupt(sequential(while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given)),given) does not match [PAnnotated PWildCard (TName "values"),PAnnotated (PMetaVar "W") (TName "values")]
      handle-abrupt(sequential(while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given)),given):
    Pattern match failed: sequential(while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given)),given does not match [PAnnotated (PMetaVar "V") (TName "values"),PMetaVar "Y"]
      sequential(while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given)):
    Pattern match failed: while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given) does not match [PMetaVar "Y"]
    Pattern match failed: while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given) does not match [PValue (PADT "null-value" []),PSeqVar "Y+" PlusOp]
      sequential(sequential(update-thread-stepping,thread-step),while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step))):
    Pattern match failed: sequential(update-thread-stepping,thread-step),while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)) does not match [PMetaVar "Y"]
    Pattern match failed: sequential(update-thread-stepping,thread-step),while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)) does not match [PValue (PADT "null-value" []),PSeqVar "Y+" PlusOp]
      thread-step:
    Pattern match failed: closed(scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))))) does not match [PValue (VPAnnotated (VPMetaVar "V") (TName "values"))]
      closed(scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))))):
    Pattern match failed: scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))))):
    Pattern match failed: map-empty,postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))):
    Pattern match failed: scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      give(tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))):
    Pattern match failed: tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))) does not match [PAnnotated PWildCard (TName "values"),PAnnotated (PMetaVar "W") (TName "values")]
      closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))):
    Pattern match failed: scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))):
    Pattern match failed: map-empty,handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))):
    Pattern match failed: scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      give(tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))):
    Pattern match failed: tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))) does not match [PAnnotated PWildCard (TName "values"),PAnnotated (PMetaVar "W") (TName "values")]
      closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))):
    Pattern match failed: scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))):
    Pattern match failed: map-empty,handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))):
    Pattern match failed: scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: thread(thunk(abstraction(closed(scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))))))),[]) does not match [PADT "thread" [PADT "thunk" [PADT "abstraction" [VPMetaVar "X"]]]]
      sequential(while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given)):
    Pattern match failed: while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given) does not match [PMetaVar "Y"]
    Pattern match failed: while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)),check(not(is-some-thread-suspended)),thread-value(given) does not match [PValue (PADT "null-value" []),PSeqVar "Y+" PlusOp]
      sequential(sequential(update-thread-stepping,thread-step),while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step))):
    Pattern match failed: sequential(update-thread-stepping,thread-step),while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)) does not match [PMetaVar "Y"]
    Pattern match failed: sequential(update-thread-stepping,thread-step),while-true(is-some-thread-active,sequential(update-thread-stepping,thread-step)) does not match [PValue (PADT "null-value" []),PSeqVar "Y+" PlusOp]
      thread-step:
    Pattern match failed: closed(scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))))) does not match [PValue (VPAnnotated (VPMetaVar "V") (TName "values"))]
      closed(scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))))):
    Pattern match failed: scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))))):
    Pattern match failed: map-empty,postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))):
    Pattern match failed: scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      give(tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))):
    Pattern match failed: tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))) does not match [PAnnotated PWildCard (TName "values"),PAnnotated (PMetaVar "W") (TName "values")]
      closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))):
    Pattern match failed: scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))):
    Pattern match failed: map-empty,handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))):
    Pattern match failed: scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple()))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      give(tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))):
    Pattern match failed: tuple,closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))) does not match [PAnnotated PWildCard (TName "values"),PAnnotated (PMetaVar "W") (TName "values")]
      closed(scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))))):
    Pattern match failed: scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))):
    Pattern match failed: {"main" |-> variable(atom(@1),functions(tuples(values*),values))},scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))))):
    Pattern match failed: map-empty,handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))):
    Pattern match failed: scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))) does not match [PAnnotated (PMetaVar "V") (TName "values")]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
      scope("...",return(apply(assigned(bound("foo")),tuple(decimal-natural("1"))))):
    Pattern match failed: {"foo" |-> function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))},return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))) does not match [PAnnotated PWildCard (TName "environments"),PAnnotated (PMetaVar "V") (TName "values")]
      assigned(function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))))):
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: function(abstraction(closed(scope("...",scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a"))))))))) does not match [PADT "variable" [VPAnnotated (VPMetaVar "L") (TName "locations"),VPAnnotated (VPMetaVar "T") (TName "types")]]
    Pattern match failed: thread(thunk(abstraction(closed(scope("...",postpone-after-effect(scope(collateral(bind("main",allocate-variable(functions(tuples(values*),values)))),sequential(assign(bound("main"),function(closure(scope(match(given,tuple()),handle-return(scope(bind("foo",function(closure(scope(match(given,tuple(pattern(closure(bind("a",allocate-initialised-variable(values,given)))))),handle-return(return(assigned(bound("a")))))))),return(apply(assigned(bound("foo")),tuple(decimal-natural("1")))))))))),apply(assigned(bound("main")),tuple())))))))),[]) does not match [PADT "thread" [PADT "thunk" [PADT "abstraction" [VPMetaVar "X"]]]]
