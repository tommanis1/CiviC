module CIVIC-Start

imports
  libstratego-gpp
  signatures/-
  pp/CIVIC-parenthesize
  pp/CIVIC-pp

imports
  cbs-gen/CIVIC-Funcons
  cbs-gen/CIVIC-B-Cpp

// Language "CIVIC"

rules
to-funcons-lex: 
  FCTDoubleQuoted(L-id-user-defined(LEX-id-user-defined(str))) -> 
  FCTString(<double-quote> str)
to-funcons-lex: 
  FCTDoubleQuoted(L-int(LEX-int(str))) -> 
  FCTString(<double-quote> str)
to-funcons-lex: 
  FCTDoubleQuoted(L-bool-const(LEX-bool-const(str))) -> 
  FCTString(<double-quote> str)
to-funcons-lex: 
  FCTDoubleQuoted(L-basic-type(LEX-basic-type(str))) -> 
  FCTString(<double-quote> str)
to-funcons-lex: 
  FCTDoubleQuoted(L-return-type(LEX-return-type(str))) -> 
  FCTString(<double-quote> str)
to-funcons-lex: 
  FCTDoubleQuoted(L-std-lib-id(LEX-std-lib-id(str))) -> 
  FCTString(<double-quote> str)
to-funcons-lex: 
  FCTDoubleQuoted(L-str-cont(LEX-str-cont(str))) -> 
  FCTString(<double-quote> str)
to-funcons:
  |[ id[: (:UID:) :] ]| ->
  |[ \"(:UID:)\" ]|
to-funcons:
  |[ id[: (:STDLibID:) :] ]| ->
  |[ \"(:STDLibID:)\" ]|
to-funcons:
  |[ type[: (:BasicType:) :] ]| ->
  |[ values ]|
to-funcons:
  |[ eval[: (:N:) :] ]| ->
  |[ decimal-natural (\"(:N:)\") ]|
to-funcons:
  |[ eval[: -(:N:) :] ]| ->
  |[ integer-negate (decimal-natural (\"(:N:)\")) ]|
to-funcons:
  |[ eval[: "(:StringContent:)" :] ]| ->
  |[ \"(:StringContent:)\" ]|
to-funcons:
  |[ eval[: (:ID:) :] ]| ->
  |[ assigned (bound (id[: (:ID:) :])) ]|
to-funcons:
  |[ eval-bool[: true :] ]| ->
  |[ true ]|
to-funcons:
  |[ eval-bool[: false :] ]| ->
  |[ false ]|
to-funcons:
  |[ eval[: (:Bool:) :] ]| ->
  |[ eval-bool[: (:Bool:) :] ]|
to-funcons:
  |[ eval[: (:ID:)((:Exprs?:)) :] ]| ->
  |[ if-else (is (eval[: (:ID:) :], 
                     functions), 
             apply (eval[: (:ID:) :], 
                     tuple (eval-exprs[: (:Exprs?:) :])), 
             apply (get-class-method (dereference eval[: (:ID:) :], 
                             "_callable"), 
                     tuple (eval-exprs[: (:Exprs?:) :]))) ]|
to-funcons:
  |[ eval[: ((:E:)) :] ]| ->
  |[ eval[: (:E:) :] ]|
to-funcons:
  |[ eval[: (:E1:)+(:E2:) :] ]| ->
  |[ else (int-add (eval[: (:E1:) :], 
                     eval[: (:E2:) :]), 
             float-add (eval[: (:E1:) :], 
                     eval[: (:E2:) :])) ]|
to-funcons:
  |[ eval[: (:E1:)-(:E2:) :] ]| ->
  |[ else (integer-subtract (eval[: (:E1:) :], 
                     eval[: (:E2:) :]), 
             float-subtract (eval[: (:E1:) :], 
                     eval[: (:E2:) :])) ]|
to-funcons:
  |[ eval[: (:E1:)*(:E2:) :] ]| ->
  |[ else (int-mul (eval[: (:E1:) :], 
                     eval[: (:E2:) :]), 
             float-multiply (eval[: (:E1:) :], 
                     eval[: (:E2:) :])) ]|
to-funcons:
  |[ eval[: (:E1:)/(:E2:) :] ]| ->
  |[ else (int-div (eval[: (:E1:) :], 
                     eval[: (:E2:) :]), 
             float-divide (eval[: (:E1:) :], 
                     eval[: (:E2:) :])) ]|
to-funcons:
  |[ eval[: (:E1:)==(:E2:) :] ]| ->
  |[ is-equal (eval[: (:E1:) :], 
             eval[: (:E2:) :]) ]|
to-funcons:
  |[ eval[: (:E1:)!=(:E2:) :] ]| ->
  |[ not (is-equal (eval[: (:E1:) :], 
                     eval[: (:E2:) :])) ]|
to-funcons:
  |[ eval[: (:E1:)<(:E2:) :] ]| ->
  |[ is-less (eval[: (:E1:) :], 
             eval[: (:E2:) :]) ]|
to-funcons:
  |[ eval[: (:E1:)<=(:E2:) :] ]| ->
  |[ is-less-or-equal (eval[: (:E1:) :], 
             eval[: (:E2:) :]) ]|
to-funcons:
  |[ eval[: (:E1:)>(:E2:) :] ]| ->
  |[ is-greater (eval[: (:E1:) :], 
             eval[: (:E2:) :]) ]|
to-funcons:
  |[ eval[: (:E1:)>=(:E2:) :] ]| ->
  |[ is-greater-or-equal (eval[: (:E1:) :], 
             eval[: (:E2:) :]) ]|
to-funcons:
  |[ eval[: (:E1:)&&(:E2:) :] ]| ->
  |[ if-else (eval[: (:E1:) :], 
             eval[: (:E2:) :], 
             false) ]|
to-funcons:
  |[ eval[: (:E1:)||(:E2:) :] ]| ->
  |[ if-else (eval[: (:E1:) :], 
             true, 
             eval[: (:E2:) :]) ]|
to-funcons:
  |[ eval[: !(:E:) :] ]| ->
  |[ not (eval[: (:E:) :]) ]|
to-funcons:
  |[ eval[: ((:BasicType:))(:E:) :] ]| ->
  |[ cast-to-type (eval[: (:E:) :], 
             type[: (:BasicType:) :]) ]|
to-funcons:
  |[ eval-exprs[:  :] ]| ->
  |[ () ]|
to-funcons:
  |[ eval-exprs[: (:E:) :] ]| ->
  |[ eval[: (:E:) :] ]|
to-funcons:
  |[ eval-exprs[: (:E:),(:Exprs:) :] ]| ->
  |[ eval[: (:E:) :], 
     eval-exprs[: (:Exprs:) :] ]|
to-funcons:
  |[ declare[: (:BasicType:)(:ID:); :] ]| ->
  |[ bind (id[: (:ID:) :], 
             alloc (type[: (:BasicType:) :])) ]|
to-funcons:
  |[ initialise[: (:BasicType:)(:ID:); :] ]| ->
  |[ () ]|
to-funcons:
  |[ declare[: (:BasicType:)(:ID:)=(:E:); :] ]| ->
  |[ bind (id[: (:ID:) :], 
             alloc (type[: (:BasicType:) :])) ]|
to-funcons:
  |[ initialise[: (:BasicType:)(:ID:)=(:E:); :] ]| ->
  |[ assign (bound (id[: (:ID:) :]), 
             eval[: (:E:) :]) ]|
to-funcons:
  |[ exec[: (:ImpStmt:)(:Stmts:) :] ]| ->
  |[ sequential (exec[: (:ImpStmt:) :], 
             exec[: (:Stmts:) :]) ]|
to-funcons:
  |[ exec[: (:CiviCVarDecl:)(:Stmts:) :] ]| ->
  |[ exec[: (:Stmts:) :] ]|
to-funcons:
  |[ exec[: (:ID:)=(:E:); :] ]| ->
  |[ assign (bound (id[: (:ID:) :]), 
             eval[: (:E:) :]) ]|
to-desugared:
  [: if((:E:))(:Block:) :] : stmt ->
  [: if((:E:))(:Block:)else{} :] : stmt
to-funcons:
  |[ exec[: if((:E:))(:Block1:)else(:Block2:) :] ]| ->
  |[ if-true-else (eval[: (:E:) :], 
             exec[: (:Block1:) :], 
             exec[: (:Block2:) :]) ]|
to-funcons:
  |[ exec[: while((:E:))(:Block:) :] ]| ->
  |[ while (eval[: (:E:) :], 
             exec[: (:Block:) :]) ]|
to-funcons:
  |[ exec[: do(:Block:)while((:E:)) :] ]| ->
  |[ while (eval[: (:E:) :], 
             exec[: (:Block:) :]) ]|
to-funcons:
  |[ exec[: for(int(:ID:)=(:E1:),(:E2:),(:E3:))(:Block:) :] ]| ->
  |[ scope (bind (id[: (:ID:) :], 
                     allocate-initialised-variable (integers, 
                             eval[: (:E1:) :])), 
             while (is-less (assigned (bound (id[: (:ID:) :])), 
                             eval[: (:E2:) :]), 
                     sequential (exec[: (:Block:) :], 
                             assign (bound (id[: (:ID:) :]), 
                                     integer-add (assigned (bound (id[: (:ID:) :])), 
                                             eval[: (:E3:) :]))))) ]|
to-funcons:
  |[ exec[: for(int(:ID:)=(:E1:),(:E2:))(:Block:) :] ]| ->
  |[ scope (bind (id[: (:ID:) :], 
                     allocate-initialised-variable (integers, 
                             eval[: (:E1:) :])), 
             while (is-less (assigned (bound (id[: (:ID:) :])), 
                             eval[: (:E2:) :]), 
                     sequential (exec[: (:Block:) :], 
                             assign (bound (id[: (:ID:) :]), 
                                     integer-add (assigned (bound (id[: (:ID:) :])), 
                                             decimal-natural ("1")))))) ]|
to-funcons:
  |[ exec[: try(:Block1:)catch(...)(:Block2:); :] ]| ->
  |[ handle-thrown (sequential (exec[: (:Block1:) :]), 
             sequential (exec[: (:Block2:) :])) ]|
to-funcons:
  |[ exec[: return(:E:); :] ]| ->
  |[ return (eval[: (:E:) :]) ]|
to-funcons:
  |[ exec[: return; :] ]| ->
  |[ return (null) ]|
to-funcons:
  |[ exec[: (:E:); :] ]| ->
  |[ eval[: (:E:) :] ]|
to-funcons:
  |[ exec[: print(:E:); :] ]| ->
  |[ print (eval[: (:E:) :]) ]|
to-funcons:
  |[ exec[: {(:Stmts:)} :] ]| ->
  |[ exec[: (:Stmts:) :] ]|
to-funcons:
  |[ exec[: {} :] ]| ->
  |[ null ]|
to-funcons:
  |[ patts[:  :] ]| ->
  |[ () ]|
to-funcons:
  |[ patts[: (:BasicType:)(:ID:) :] ]| ->
  |[ pattern closure (bind (id[: (:ID:) :], 
                            allocate-initialised-variable (values, 
                                    given))) ]|
to-funcons:
  |[ patts[: (:BasicType:)(:ID:),(:Params:) :] ]| ->
  |[ patts[: (:BasicType:)(:ID:) :], 
     patts[: (:Params:) :] ]|
to-funcons:
  |[ initialise[: (:RetType:)(:ID:)((:Params?:))(:Block:) :] ]| ->
  |[ assign (bound (id[: (:ID:) :]), 
             function closure (scope (match (given, 
                                            tuple (patts[: (:Params?:) :])), 
                                    handle-return scope (collateral (declarations-local[: (:Block:) :]), 
                                                   give (handle-return sequential (initialisations-local[: (:Block:) :], 
                                                                          exec[: (:Block:) :]), 
                                                           sequential (destructions-local[: (:Block:) :], 
                                                                   return given)))))) ]|
to-funcons:
  |[ declare[: (:RetType:)(:ID:)((:Params?:))(:Block:) :] ]| ->
  |[ bind (id[: (:ID:) :], 
             allocate-variable (functions (tuples ((values)*), 
                             values))) ]|
to-funcons:
  |[ declarations-local[: {(:Stmts:)} :] ]| ->
  |[ declarations-local[: (:Stmts:) :] ]|
to-funcons:
  |[ declarations-local[: {} :] ]| ->
  |[ () ]|
to-funcons:
  |[ declarations-local[:  :] ]| ->
  |[ () ]|
to-funcons:
  |[ declarations-local[: (:ImpStmt:)(:Stmts?:) :] ]| ->
  |[ declarations-local[: (:Stmts?:) :] ]|
to-funcons:
  |[ declarations-local[: (:CiviCVarDecl:)(:Stmts?:) :] ]| ->
  |[ declare[: (:CiviCVarDecl:) :], 
     declarations-local[: (:Stmts?:) :] ]|
to-funcons-default:
  |[ declarations-local[: (:Stmt:)(:Stmts?:) :] ]| ->
  |[ declarations-local[: (:Stmts?:) :] ]|
to-funcons:
  |[ destructions-local[: {(:Stmts:)} :] ]| ->
  |[ destructions-local[: (:Stmts:) :] ]|
to-funcons:
  |[ destructions-local[: {} :] ]| ->
  |[ () ]|
to-funcons:
  |[ destructions-local[:  :] ]| ->
  |[ () ]|
to-funcons:
  |[ destructions-local[: (:CPPVarDecl:)(:Stmts?:) :] ]| ->
  |[ destruct[: (:CPPVarDecl:) :], 
     destructions-local[: (:Stmts?:) :] ]|
to-funcons-default:
  |[ destructions-local[: (:Stmt:)(:Stmts?:) :] ]| ->
  |[ destructions-local[: (:Stmts?:) :] ]|
to-funcons:
  |[ initialisations-local[: {(:Stmts:)} :] ]| ->
  |[ initialisations-local[: (:Stmts:) :] ]|
to-funcons:
  |[ initialisations-local[: {} :] ]| ->
  |[ () ]|
to-funcons:
  |[ initialisations-local[:  :] ]| ->
  |[ () ]|
to-funcons:
  |[ initialisations-local[: (:CiviCVarDecl:)(:Stmts?:) :] ]| ->
  |[ initialise[: (:CiviCVarDecl:) :], 
     initialisations-local[: (:Stmts?:) :] ]|
to-funcons-default:
  |[ initialisations-local[: (:Stmt:)(:Stmts?:) :] ]| ->
  |[ initialisations-local[: (:Stmts?:) :] ]|
to-funcons:
  |[ start[: (:Pgm:) :] ]| ->
  |[ initialise-binding initialise-storing initialise-giving initialise-memos finalise-failing finalise-throwing overload-multithread postpone-after-effect run[: (:Pgm:) :] ]|
to-funcons:
  |[ run[: (:Decls:) :] ]| ->
  |[ scope (bind ("_std", 
                     allocate-initialised-variable (environments, 
                             map ())), 
             sequential (initialisations-lib[: (:Decls:) :], 
                     scope (collateral (declarations[: (:Decls:) :]), 
                             sequential (initialisations[: (:Decls:) :], 
                                     apply (assigned (bound ("main")), 
                                             tuple ()), 
                                     destructions[: (:Decls:) :])))) ]|
to-funcons:
  |[ declarations[: (:Decl:) :] ]| ->
  |[ declare[: (:Decl:) :] ]|
to-funcons:
  |[ declarations[: (:Decl:)(:Decls:) :] ]| ->
  |[ declare[: (:Decl:) :], 
     declarations[: (:Decls:) :] ]|
to-funcons:
  |[ initialisations[: (:Decl:) :] ]| ->
  |[ initialise[: (:Decl:) :] ]|
to-funcons:
  |[ initialisations[: (:Decl:)(:Decls:) :] ]| ->
  |[ initialise[: (:Decl:) :], 
     initialisations[: (:Decls:) :] ]|
to-funcons:
  |[ initialisations-lib[: (:Decl:) :] ]| ->
  |[ initialise-lib[: (:Decl:) :] ]|
to-funcons:
  |[ initialisations-lib[: (:Decl:)(:Decls:) :] ]| ->
  |[ initialise-lib[: (:Decl:) :], 
     initialisations-lib[: (:Decls:) :] ]|
to-funcons:
  |[ destructions[: (:Decl:) :] ]| ->
  |[ destruct[: (:Decl:) :] ]|
to-funcons:
  |[ destructions[: (:Decl:)(:Decls:) :] ]| ->
  |[ destruct[: (:Decl:) :], 
     destructions[: (:Decls:) :] ]|

