module CIVIC-Start
            
imports 
  CIVIC-Funcons
  CIVIC-A-Disambiguation
  CIVIC-B-Cpp
  Funcons

// Language "CIVIC"
    
lexical syntax // Language
  LEX-id-user-defined = ( [A-Z] | [a-z] | "_" ) ( [0-9] | [A-Z] | [a-z] | "_" )*
  LEX-int = ( [0-9] )+
  LEX-keyword = "do"
  LEX-keyword = "else"
  LEX-keyword = "fork"
  LEX-keyword = "if"
  LEX-keyword = "in"
  LEX-keyword = "print"
  LEX-keyword = "return"
  LEX-keyword = "ref"
  LEX-keyword = "else"
  LEX-keyword = "while"
  LEX-keyword = "true"
  LEX-keyword = "false"
  LEX-keyword = "include"
  LEX-keyword = "iostream"
  LEX-keyword = "chrono"
  LEX-keyword = "thread"
  LEX-keyword = "mutex"
  LEX-keyword = "extern"
  LEX-keyword = "future"
  LEX-keyword = "condition_variable"
  LEX-keyword = "chrono"
  LEX-keyword = "try"
  LEX-keyword = "catch"
  LEX-bool-const = "true"
  LEX-bool-const = "false"
  LEX-basic-type = "int"
  LEX-basic-type = "float"
  LEX-basic-type = "bool"
  LEX-return-type = "void"
  LEX-return-type = LEX-basic-type
  LEX-std-lib-id = "printInt"
  LEX-std-lib-id = "printFloat"
  LEX-std-lib-id = "printSpaces"
  LEX-std-lib-id = "printNewlines"
  LEX-std-lib-id = "scanInt"
  LEX-std-lib-id = "scanFloat"
  LEX-str-cont = ( [A-Z] | [a-z] | " " | "." | "," | "\\n" | [0-9] | ":" | "_" )*
  LEX-R-export = "export"
  
syntax // Language
  
context-free syntax // Language
  L-id-user-defined.LEX-id-user-defined = 
    LEX-id-user-defined
  L-int.LEX-int = 
    LEX-int
  L-keyword.LEX-keyword = 
    LEX-keyword
  L-bool-const.LEX-bool-const = 
    LEX-bool-const
  L-basic-type.LEX-basic-type = 
    LEX-basic-type
  L-return-type.LEX-return-type = 
    LEX-return-type
  L-std-lib-id.LEX-std-lib-id = 
    LEX-std-lib-id
  L-str-cont.LEX-str-cont = 
    LEX-str-cont
  L-id.L-id--L-id-user-defined =
    L-id-user-defined
  L-id.L-id--L-std-lib-id =
    L-std-lib-id
  
  L-negative-num.L-negative-num--DASH-L-int =
    "-" L-int
  
  L-string.L-string--QUOTE-L-str-cont-QUOTE =
    "\"" L-str-cont "\""
  
  L-exp.L-exp--LPAREN-L-exp-RPAREN =
    "(" L-exp ")"
  L-exp.L-exp--BANG-L-exp =
    "!" L-exp
  L-exp.L-exp--L-string =
    L-string
  L-exp.L-exp--L-exp-PLUS-L-exp =
    L-exp "+" L-exp
  L-exp.L-exp--L-exp-DASH-L-exp =
    L-exp "-" L-exp
  L-exp.L-exp--L-exp-STAR-L-exp =
    L-exp "*" L-exp
  L-exp.L-exp--L-exp-SLASH-L-exp =
    L-exp "/" L-exp
  L-exp.L-exp--L-exp-EQUALS-EQUALS-L-exp =
    L-exp "==" L-exp
  L-exp.L-exp--L-exp-BANG-EQUALS-L-exp =
    L-exp "!=" L-exp
  L-exp.L-exp--L-exp-LESS-L-exp =
    L-exp "<" L-exp
  L-exp.L-exp--L-exp-LESS-EQUALS-L-exp =
    L-exp "<=" L-exp
  L-exp.L-exp--L-exp-GREATER-L-exp =
    L-exp ">" L-exp
  L-exp.L-exp--L-exp-GREATER-EQUALS-L-exp =
    L-exp ">=" L-exp
  L-exp.L-exp--L-exp-AMPERSAND-AMPERSAND-L-exp =
    L-exp "&&" L-exp
  L-exp.L-exp--L-exp-BAR-BAR-L-exp =
    L-exp "||" L-exp
  L-exp.L-exp--L-id-LPAREN-L-exprs-Q-RPAREN =
    L-id "(" L-exprs? ")"
  L-exp.L-exp--LPAREN-L-basic-type-RPAREN-L-exp =
    "(" L-basic-type ")" L-exp
  L-exp.L-exp--L-id =
    L-id
  L-exp.L-exp--L-const =
    L-const
  L-exp.L-exp--L-cpp-expr =
    L-cpp-expr
  L-exp.L-exp--AMPERSAND-L-exp =
    "&" L-exp
  
  L-const.L-const--L-bool-const =
    L-bool-const
  L-const.L-const--L-int =
    L-int
  L-const.L-const--L-negative-num =
    L-negative-num
  
  L-exprs.L-exprs--L-exp-C-COMMA-L-exprs-D-Q =
    L-exp L-COMMA-L-exprs?
  
  L-COMMA-L-exprs.L-COMMA-L-exprs--COMMA-L-exprs =
    "," L-exprs
  
  
  L-decl.L-decl--L-cpp-decl =
    L-cpp-decl
  L-decl.L-decl--L-function-definition =
    L-function-definition
  L-decl.L-decl--L-var-decl =
    L-var-decl
  
  L-civic-var-decl.L-civic-var-decl--L-basic-type-L-id-C-EQUALS-L-exp-D-Q-SEMI =
    L-basic-type L-id L-EQUALS-L-exp? ";"
  
  L-EQUALS-L-exp.L-EQUALS-L-exp--EQUALS-L-exp =
    "=" L-exp
  
  
  L-var-decl.L-var-decl--L-civic-var-decl =
    L-civic-var-decl
  L-var-decl.L-var-decl--L-cpp-var-decl =
    L-cpp-var-decl
  
  L-stmts.L-stmts--L-stmt-L-stmts-Q =
    L-stmt L-stmts?
  
  L-stmt.L-stmt--L-civic-var-decl =
    L-civic-var-decl
  L-stmt.L-stmt--L-imp-stmt =
    L-imp-stmt
  L-stmt.L-stmt--L-cpp-stmt =
    L-cpp-stmt
  L-stmt.L-stmt--L-cpp-var-decl =
    L-cpp-var-decl
  
  L-imp-stmt.L-imp-stmt--L-id-EQUALS-L-exp-SEMI =
    L-id "=" L-exp ";"
  L-imp-stmt.L-imp-stmt--L-exp-SEMI =
    L-exp ";"
  L-imp-stmt.L-imp-stmt--R-if-LPAREN-L-exp-RPAREN-L-block-C-R-else-L-block-D-Q =
    "if" "(" L-exp ")" L-block L-R-else-L-block?
  L-imp-stmt.L-imp-stmt--R-while-LPAREN-L-exp-RPAREN-L-block =
    "while" "(" L-exp ")" L-block
  L-imp-stmt.L-imp-stmt--R-do-L-block-R-while-LPAREN-L-exp-RPAREN =
    "do" L-block "while" "(" L-exp ")"
  L-imp-stmt.L-imp-stmt--R-for-LPAREN-R-int-L-id-EQUALS-L-exp-COMMA-L-exp-C-COMMA-L-exp-D-Q-RPAREN-L-block =
    "for" "(" "int" L-id "=" L-exp "," L-exp L-COMMA-L-exp? ")" L-block
  L-imp-stmt.L-imp-stmt--R-return-L-exp-Q-SEMI =
    "return" L-exp? ";"
  L-imp-stmt.L-imp-stmt--L-block =
    L-block
  L-imp-stmt.L-imp-stmt--R-print-L-exp-SEMI =
    "print" L-exp ";"
  L-imp-stmt.L-imp-stmt--R-try-L-block-R-catch-LPAREN-DOT-DOT-DOT-RPAREN-L-block-SEMI =
    "try" L-block "catch" "(" "..." ")" L-block ";"
  
  L-R-else-L-block.L-R-else-L-block--R-else-L-block =
    "else" L-block
  
  
  L-COMMA-L-exp.L-COMMA-L-exp--COMMA-L-exp =
    "," L-exp
  
  
  L-block.L-block--LBRACE-L-stmts-Q-RBRACE =
    "{" L-stmts? "}"
  
  L-function-definition.L-function-definition--R-export-Q-L-return-type-L-id-LPAREN-L-params-Q-RPAREN-L-block =
    LEX-R-export? L-return-type L-id "(" L-params? ")" L-block
  
  L-param.L-param--L-basic-type-L-id =
    L-basic-type L-id
  
  L-params.L-params--L-param-C-COMMA-L-params-D-Q =
    L-param L-COMMA-L-params?
  
  L-COMMA-L-params.L-COMMA-L-params--COMMA-L-params =
    "," L-params
  
  
  L-start.L-start--L-pgm =
    L-pgm
  
  L-pgm.L-pgm--L-decls =
    L-decls
  
  L-decls.L-decls--L-decl-L-decls-Q =
    L-decl L-decls?
  
  
context-free syntax // Semantics
  FCT-Quoted.L-id-user-defined = L-id-user-defined
  FCT-Quoted.L-int = L-int
  FCT-Quoted.LEX-keyword = LEX-keyword
  FCT-Quoted.L-bool-const = L-bool-const
  FCT-Quoted.L-basic-type = L-basic-type
  FCT-Quoted.L-return-type = L-return-type
  FCT-Quoted.L-std-lib-id = L-std-lib-id
  FCT-Quoted.L-str-cont = L-str-cont
  FCT.T-eval =
    "eval" "[:" L-exp ":]"
  FCT.T-eval-exprs =
    "eval-exprs" "[:" L-exprs? ":]"
  FCT.T-exec-var =
    "exec-var" "[:" L-var-decl ":]"
  FCT.T-type =
    "type" "[:" L-basic-type ":]"
  FCT.T-id =
    "id" "[:" L-id ":]"
  FCT.T-eval-bool =
    "eval-bool" "[:" L-bool-const ":]"
  FCT.T-exec =
    "exec" "[:" L-stmts ":]"
  FCT-SEQ.T-patts =
    "patts" "[:" L-params? ":]"
  FCT.T-declarations-local =
    "declarations-local" "[:" L-stmts? ":]"
  FCT.T-destructions-local =
    "destructions-local" "[:" L-stmts? ":]"
  FCT.T-initialisations-local =
    "initialisations-local" "[:" L-stmts? ":]"
  FCT.T-start =
    "start" "[:" L-start ":]"
  FCT.T-run =
    "run" "[:" L-pgm ":]"
  FCT-SEQ.T-declarations =
    "declarations" "[:" L-decls ":]"
  FCT-SEQ.T-initialisations =
    "initialisations" "[:" L-decls ":]"
  FCT-SEQ.T-initialisations-lib =
    "initialisations-lib" "[:" L-decls ":]"
  FCT.T-initialise =
    "initialise" "[:" L-decl ":]"
  FCT.T-initialise-lib =
    "initialise-lib" "[:" L-decl ":]"
  FCT.T-declare =
    "declare" "[:" L-decl ":]"
  FCT-SEQ.T-destructions =
    "destructions" "[:" L-decls ":]"
  FCT.T-destruct =
    "destruct" "[:" L-decl ":]"
  
context-free syntax // Desugaring
  Term.ToTerm = "[:" L-stmt  ":]" ":" "stmt"
  
variables // Meta-variables
  L-id-user-defined = "(:UID" [1-9]? ":)" {prefer}
  L-id-user-defined? = "(:UID" [1-9]? "?:)" {prefer}
  L-id-user-defined* = "(:UID" [1-9]? "*:)" {prefer}
  L-id-user-defined+ = "(:UID" [1-9]? "+:)" {prefer}
  L-int = "(:N" [1-9]? ":)" {prefer}
  L-int? = "(:N" [1-9]? "?:)" {prefer}
  L-int* = "(:N" [1-9]? "*:)" {prefer}
  L-int+ = "(:N" [1-9]? "+:)" {prefer}
  L-bool-const = "(:Bool" [1-9]? ":)" {prefer}
  L-bool-const? = "(:Bool" [1-9]? "?:)" {prefer}
  L-bool-const* = "(:Bool" [1-9]? "*:)" {prefer}
  L-bool-const+ = "(:Bool" [1-9]? "+:)" {prefer}
  L-basic-type = "(:BasicType" [1-9]? ":)" {prefer}
  L-basic-type? = "(:BasicType" [1-9]? "?:)" {prefer}
  L-basic-type* = "(:BasicType" [1-9]? "*:)" {prefer}
  L-basic-type+ = "(:BasicType" [1-9]? "+:)" {prefer}
  L-return-type = "(:RetType" [1-9]? ":)" {prefer}
  L-return-type? = "(:RetType" [1-9]? "?:)" {prefer}
  L-return-type* = "(:RetType" [1-9]? "*:)" {prefer}
  L-return-type+ = "(:RetType" [1-9]? "+:)" {prefer}
  L-std-lib-id = "(:STDLibID" [1-9]? ":)" {prefer}
  L-std-lib-id? = "(:STDLibID" [1-9]? "?:)" {prefer}
  L-std-lib-id* = "(:STDLibID" [1-9]? "*:)" {prefer}
  L-std-lib-id+ = "(:STDLibID" [1-9]? "+:)" {prefer}
  L-str-cont = "(:StringContent" [1-9]? ":)" {prefer}
  L-str-cont? = "(:StringContent" [1-9]? "?:)" {prefer}
  L-str-cont* = "(:StringContent" [1-9]? "*:)" {prefer}
  L-str-cont+ = "(:StringContent" [1-9]? "+:)" {prefer}
  L-id = "(:ID" [1-9]? ":)" {prefer}
  L-id? = "(:ID" [1-9]? "?:)" {prefer}
  L-id* = "(:ID" [1-9]? "*:)" {prefer}
  L-id+ = "(:ID" [1-9]? "+:)" {prefer}
  L-negative-num = "(:NN" [1-9]? ":)" {prefer}
  L-negative-num? = "(:NN" [1-9]? "?:)" {prefer}
  L-negative-num* = "(:NN" [1-9]? "*:)" {prefer}
  L-negative-num+ = "(:NN" [1-9]? "+:)" {prefer}
  L-string = "(:S" [1-9]? ":)" {prefer}
  L-string? = "(:S" [1-9]? "?:)" {prefer}
  L-string* = "(:S" [1-9]? "*:)" {prefer}
  L-string+ = "(:S" [1-9]? "+:)" {prefer}
  L-exp = "(:E" [1-9]? ":)" {prefer}
  L-exp? = "(:E" [1-9]? "?:)" {prefer}
  L-exp* = "(:E" [1-9]? "*:)" {prefer}
  L-exp+ = "(:E" [1-9]? "+:)" {prefer}
  L-const = "(:Const" [1-9]? ":)" {prefer}
  L-const? = "(:Const" [1-9]? "?:)" {prefer}
  L-const* = "(:Const" [1-9]? "*:)" {prefer}
  L-const+ = "(:Const" [1-9]? "+:)" {prefer}
  L-exprs = "(:Exprs" [1-9]? ":)" {prefer}
  L-exprs? = "(:Exprs" [1-9]? "?:)" {prefer}
  L-exprs* = "(:Exprs" [1-9]? "*:)" {prefer}
  L-exprs+ = "(:Exprs" [1-9]? "+:)" {prefer}
  L-decl = "(:Decl" [1-9]? ":)" {prefer}
  L-decl? = "(:Decl" [1-9]? "?:)" {prefer}
  L-decl* = "(:Decl" [1-9]? "*:)" {prefer}
  L-decl+ = "(:Decl" [1-9]? "+:)" {prefer}
  L-civic-var-decl = "(:CiviCVarDecl" [1-9]? ":)" {prefer}
  L-civic-var-decl? = "(:CiviCVarDecl" [1-9]? "?:)" {prefer}
  L-civic-var-decl* = "(:CiviCVarDecl" [1-9]? "*:)" {prefer}
  L-civic-var-decl+ = "(:CiviCVarDecl" [1-9]? "+:)" {prefer}
  L-var-decl = "(:VarDecl" [1-9]? ":)" {prefer}
  L-var-decl? = "(:VarDecl" [1-9]? "?:)" {prefer}
  L-var-decl* = "(:VarDecl" [1-9]? "*:)" {prefer}
  L-var-decl+ = "(:VarDecl" [1-9]? "+:)" {prefer}
  L-stmts = "(:Stmts" [1-9]? ":)" {prefer}
  L-stmts? = "(:Stmts" [1-9]? "?:)" {prefer}
  L-stmts* = "(:Stmts" [1-9]? "*:)" {prefer}
  L-stmts+ = "(:Stmts" [1-9]? "+:)" {prefer}
  L-stmt = "(:Stmt" [1-9]? ":)" {prefer}
  L-stmt? = "(:Stmt" [1-9]? "?:)" {prefer}
  L-stmt* = "(:Stmt" [1-9]? "*:)" {prefer}
  L-stmt+ = "(:Stmt" [1-9]? "+:)" {prefer}
  L-imp-stmt = "(:ImpStmt" [1-9]? ":)" {prefer}
  L-imp-stmt? = "(:ImpStmt" [1-9]? "?:)" {prefer}
  L-imp-stmt* = "(:ImpStmt" [1-9]? "*:)" {prefer}
  L-imp-stmt+ = "(:ImpStmt" [1-9]? "+:)" {prefer}
  L-block = "(:Block" [1-9]? ":)" {prefer}
  L-block? = "(:Block" [1-9]? "?:)" {prefer}
  L-block* = "(:Block" [1-9]? "*:)" {prefer}
  L-block+ = "(:Block" [1-9]? "+:)" {prefer}
  L-function-definition = "(:FunDef" [1-9]? ":)" {prefer}
  L-function-definition? = "(:FunDef" [1-9]? "?:)" {prefer}
  L-function-definition* = "(:FunDef" [1-9]? "*:)" {prefer}
  L-function-definition+ = "(:FunDef" [1-9]? "+:)" {prefer}
  L-param = "(:Param" [1-9]? ":)" {prefer}
  L-param? = "(:Param" [1-9]? "?:)" {prefer}
  L-param* = "(:Param" [1-9]? "*:)" {prefer}
  L-param+ = "(:Param" [1-9]? "+:)" {prefer}
  L-params = "(:Params" [1-9]? ":)" {prefer}
  L-params? = "(:Params" [1-9]? "?:)" {prefer}
  L-params* = "(:Params" [1-9]? "*:)" {prefer}
  L-params+ = "(:Params" [1-9]? "+:)" {prefer}
  L-start = "(:START" [1-9]? ":)" {prefer}
  L-start? = "(:START" [1-9]? "?:)" {prefer}
  L-start* = "(:START" [1-9]? "*:)" {prefer}
  L-start+ = "(:START" [1-9]? "+:)" {prefer}
  L-pgm = "(:Pgm" [1-9]? ":)" {prefer}
  L-pgm? = "(:Pgm" [1-9]? "?:)" {prefer}
  L-pgm* = "(:Pgm" [1-9]? "*:)" {prefer}
  L-pgm+ = "(:Pgm" [1-9]? "+:)" {prefer}
  L-decls = "(:Decls" [1-9]? ":)" {prefer}
  L-decls? = "(:Decls" [1-9]? "?:)" {prefer}
  L-decls* = "(:Decls" [1-9]? "*:)" {prefer}
  L-decls+ = "(:Decls" [1-9]? "+:)" {prefer}
  
// SDF comments
  
sorts // ASTs
  T-start
